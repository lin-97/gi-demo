import{u as e}from"./index-CrcSV7hi.js";import{c as n,d as a}from"./data-DMJbYYJT.js";import{O as t,a as l}from"./regexp-CZKnpGWl.js";import{_ as s}from"./GiForm-C2SFNo8b.js";import{d as o,e as r,c as i,f as u,o as p,a as d,w as m,i as c,j as f,D as b,h as v,E as y,J as h,a5 as w,M as g,a8 as x}from"./index-CTftGuoI.js";import{u as k}from"./useResetReactive-DbNHgbsH.js";import{_}from"./index-DKPnCvLQ.js";const G=o({__name:"Card4",setup(o){const{width:G}=e(),R=r(!1),[F,C]=k({name:"",remark:"这是备注这是备注",status:1}),V=i((()=>[{type:"input",label:"姓名",field:"name",props:{maxLength:4},rules:[{required:!0,message:"请输入姓名"},{maxLength:4,message:"姓名不超过4个字符"},{match:t,message:"仅支持中文姓名"}]},{type:"input",label:"手机",field:"phone",props:{maxLength:11},rules:[{required:!0,message:"请输入手机号"},{match:l,message:"手机号格式不正确"}]},{type:"select",label:"性别",field:"sex",props:{options:[{label:"男",value:1},{label:"女",value:0}]}},{type:"date-picker",label:"生日",field:"birthday"},{type:"checkbox-group",label:"爱好",field:"hobbys",span:24,props:{options:[{label:"电影",value:"01"},{label:"音乐",value:"02"},{label:"旅行",value:"03"},{label:"游戏",value:"04"}]}},{type:"input-number",label:"排序",field:"sort",props:{min:0}},{type:"radio-group",label:"状态",field:"status",props:{disabled:R.value,options:[{label:"启用",value:1},{label:"禁用",value:0}]}},{type:"rate",label:"评分",field:"mark"},{type:"switch",label:"是否隐藏",field:"hide",formItemProps:{extra:"隐藏成绩项"},props:{disabled:R.value}},{type:"slider",label:"成绩",field:"grade"},{type:"cascader",label:"城市",field:"city",props:{options:n}},{type:"tree-select",label:"部门",field:"dept",props:{data:a}},{type:"textarea",label:"备注",field:"remark",span:24,formItemProps:{extra:"这里是额外信息"}}])),j=r(),O=()=>{C(),h.open({title:"新增",width:"90%",modalStyle:{maxWidth:"600px"},fullscreen:G.value<600,content:()=>w(s,{ref:e=>j.value=e,columns:V.value,modelValue:F,"onUpdate:modelValue":e=>Object.assign(F,e)}),onBeforeOk:async()=>{var e,n;try{return!(await(null==(n=null==(e=j.value)?void 0:e.formRef)?void 0:n.validate()))&&(await new Promise((e=>setTimeout((()=>e(!0)),300))),g.success("新增成功！"),!0)}catch{return!1}}})},E=()=>{const e={title:"编辑",width:"90%",modalStyle:{maxWidth:"600px"},fullscreen:G.value<600,content:()=>w(s,{ref:e=>j.value=e,columns:V.value,modelValue:F,"onUpdate:modelValue":e=>Object.assign(F,e)}),onBeforeOk:async()=>{var e,n;try{return!(await(null==(n=null==(e=j.value)?void 0:e.formRef)?void 0:n.validate()))&&(await new Promise((e=>setTimeout((()=>e(!0)),300))),g.success("编辑成功！"),!0)}catch{return!1}}},n=h.open(e);setTimeout((()=>{F.name="张三",n.update(e)}),300)},P=r(!1),D=()=>{R.value=!1,P.value=!0},I=()=>{R.value=!0,P.value=!0},T=()=>{x.open({title:"数据结构",content:()=>w(_,{codeJson:"\n<template>\n  <a-card title=\"配置表单-弹窗\">\n    <template #extra>\n      <a-button type=\"primary\" status=\"warning\" @click=\"onViewCode\">\n        <template #icon><icon-code /></template>\n        <span>查看代码</span>\n      </a-button>\n    </template>\n\n    <a-alert>此示例编辑模式会禁用状态、是否隐藏</a-alert>\n    <a-card title=\"表单-模态框\" :bordered=\"true\" class=\"gi_mt\">\n      <a-space>\n        <a-button type=\"primary\" @click=\"onAdd\">新增</a-button>\n        <a-button type=\"primary\" status=\"success\" @click=\"onEdit\">编辑</a-button>\n      </a-space>\n    </a-card>\n\n    <a-card title=\"表单-抽屉\" :bordered=\"true\" class=\"gi_mt\">\n      <a-space>\n        <a-button type=\"primary\" @click=\"onAddDrawer\">新增</a-button>\n        <a-button type=\"primary\" status=\"success\" @click=\"onEditDrawer\">编辑</a-button>\n      </a-space>\n    </a-card>\n\n    <a-drawer v-model:visible=\"visible\" :title=\"isEdit ? '编辑' : '新增'\" :width=\"width >= 600 ? 600 : '100%'\">\n      <GiForm v-model=\"form\" :columns=\"columns\"></GiForm>\n    </a-drawer>\n  </a-card>\n</template>\n\n<script setup lang=\"ts\">\nimport { Drawer, Message, Modal } from '@arco-design/web-vue'\nimport { useWindowSize } from '@vueuse/core'\nimport { cityOptions, deptData } from './data'\nimport Card4Json from './code/card4-json'\nimport * as Regexp from '@/utils/regexp'\nimport { type ColumnItem, GiForm } from '@/components/GiForm'\nimport { useResetReactive } from '@/hooks'\nimport GiCodeView from '@/components/GiCodeView/index.vue'\n\nconst { width } = useWindowSize()\n\nconst isEdit = ref(false)\nconst [form, resetForm] = useResetReactive({\n  name: '',\n  remark: '这是备注这是备注',\n  status: 1\n})\n\nconst columns = computed(() => [\n  {\n    type: 'input',\n    label: '姓名',\n    field: 'name',\n    props: {\n      maxLength: 4\n    },\n    rules: [\n      { required: true, message: '请输入姓名' },\n      { maxLength: 4, message: '姓名不超过4个字符' },\n      { match: Regexp.OnlyCh, message: '仅支持中文姓名' }\n    ]\n  },\n  {\n    type: 'input',\n    label: '手机',\n    field: 'phone',\n    props: {\n      maxLength: 11\n    },\n    rules: [\n      { required: true, message: '请输入手机号' },\n      { match: Regexp.Phone, message: '手机号格式不正确' }\n    ]\n  },\n  {\n    type: 'select',\n    label: '性别',\n    field: 'sex',\n    props: {\n      options: [\n        { label: '男', value: 1 },\n        { label: '女', value: 0 }\n      ]\n    }\n  },\n  {\n    type: 'date-picker',\n    label: '生日',\n    field: 'birthday'\n  },\n  {\n    type: 'checkbox-group',\n    label: '爱好',\n    field: 'hobbys',\n    span: 24,\n    props: {\n      options: [\n        { label: '电影', value: '01' },\n        { label: '音乐', value: '02' },\n        { label: '旅行', value: '03' },\n        { label: '游戏', value: '04' }\n      ]\n    }\n  },\n  {\n    type: 'input-number',\n    label: '排序',\n    field: 'sort',\n    props: {\n      min: 0\n    }\n  },\n  {\n    type: 'radio-group',\n    label: '状态',\n    field: 'status',\n    props: {\n      disabled: isEdit.value,\n      options: [\n        { label: '启用', value: 1 },\n        { label: '禁用', value: 0 }\n      ]\n    }\n  },\n  {\n    type: 'rate',\n    label: '评分',\n    field: 'mark'\n  },\n  {\n    type: 'switch',\n    label: '是否隐藏',\n    field: 'hide',\n    formItemProps: { extra: '隐藏成绩项' },\n    props: {\n      disabled: isEdit.value\n    }\n  },\n  {\n    type: 'slider',\n    label: '成绩',\n    field: 'grade'\n  },\n  {\n    type: 'cascader',\n    label: '城市',\n    field: 'city',\n    props: {\n      options: cityOptions\n    }\n  },\n  {\n    type: 'tree-select',\n    label: '部门',\n    field: 'dept',\n    props: {\n      data: deptData\n    }\n  },\n  {\n    type: 'textarea',\n    label: '备注',\n    field: 'remark',\n    span: 24,\n    formItemProps: { extra: '这里是额外信息' }\n  }\n] as ColumnItem<typeof form>[])\n\nconst GiFormRef = ref<InstanceType<typeof GiForm>>()\nconst onAdd = () => {\n  resetForm()\n  Modal.open({\n    title: '新增',\n    width: '90%',\n    modalStyle: { maxWidth: '600px' },\n    fullscreen: width.value < 600,\n    content: () =>\n      h(GiForm, {\n        'ref': (e) => GiFormRef.value = e as InstanceType<typeof GiForm>,\n        'columns': columns.value,\n        'modelValue': form,\n        'onUpdate:modelValue': (e) => Object.assign(form, e)\n      }),\n    onBeforeOk: async () => {\n      try {\n        const flag = await GiFormRef.value?.formRef?.validate()\n        if (flag) return false\n        await new Promise((resolve) => setTimeout(() => resolve(true), 300)) as unknown as Promise<boolean>\n        Message.success('新增成功！')\n        return true\n      } catch {\n        return false\n      }\n    }\n  })\n}\n\nconst onEdit = () => {\n  const option = {\n    title: '编辑',\n    width: '90%',\n    modalStyle: { maxWidth: '600px' },\n    fullscreen: width.value < 600,\n    content: () =>\n      h(GiForm, {\n        'ref': (e) => GiFormRef.value = e as InstanceType<typeof GiForm>,\n        'columns': columns.value,\n        'modelValue': form,\n        'onUpdate:modelValue': (e) => Object.assign(form, e)\n      }),\n    onBeforeOk: async () => {\n      try {\n        const flag = await GiFormRef.value?.formRef?.validate()\n        if (flag) return false\n        await new Promise((resolve) => setTimeout(() => resolve(true), 300)) as unknown as Promise<boolean>\n        Message.success('编辑成功！')\n        return true\n      } catch {\n        return false\n      }\n    }\n  }\n  const instance = Modal.open(option)\n  // 模拟异步更新\n  setTimeout(() => {\n    form.name = '张三'\n    instance.update(option)\n  }, 300)\n}\n\nconst visible = ref(false)\n\nconst onAddDrawer = () => {\n  isEdit.value = false\n  visible.value = true\n}\n\nconst onEditDrawer = () => {\n  isEdit.value = true\n  visible.value = true\n}\n\nconst onViewCode = () => {\n  Drawer.open({\n    title: '数据结构',\n    content: () => h(GiCodeView, { codeJson: Card4Json, type: 'vue' }),\n    width: width.value < 500 ? '100%' : 560\n  })\n}\n<\/script>\n\n<style lang=\"scss\" scoped></style>\n",type:"vue"}),width:G.value<500?"100%":560})};return(e,n)=>{const a=u("icon-code"),t=u("a-button"),l=u("a-alert"),o=u("a-space"),r=u("a-card"),i=u("a-drawer");return p(),d(r,{title:"配置表单-弹窗",bordered:!0,class:"gi_margin"},{extra:m((()=>[c(t,{type:"primary",status:"warning",onClick:T},{icon:m((()=>[c(a)])),default:m((()=>[n[2]||(n[2]=f("span",null,"查看代码",-1))])),_:1})])),default:m((()=>[c(l,null,{default:m((()=>n[3]||(n[3]=[b("此示例编辑模式会禁用状态、是否隐藏")]))),_:1}),c(r,{title:"表单-模态框",bordered:!0,class:"gi_mt"},{default:m((()=>[c(o,null,{default:m((()=>[c(t,{type:"primary",onClick:O},{default:m((()=>n[4]||(n[4]=[b("新增")]))),_:1}),c(t,{type:"primary",status:"success",onClick:E},{default:m((()=>n[5]||(n[5]=[b("编辑")]))),_:1})])),_:1})])),_:1}),c(r,{title:"表单-抽屉",bordered:!0,class:"gi_mt"},{default:m((()=>[c(o,null,{default:m((()=>[c(t,{type:"primary",onClick:D},{default:m((()=>n[6]||(n[6]=[b("新增")]))),_:1}),c(t,{type:"primary",status:"success",onClick:I},{default:m((()=>n[7]||(n[7]=[b("编辑")]))),_:1})])),_:1})])),_:1}),c(i,{visible:v(P),"onUpdate:visible":n[1]||(n[1]=e=>y(P)?P.value=e:null),title:v(R)?"编辑":"新增",width:v(G)>=600?600:"100%"},{default:m((()=>[c(v(s),{modelValue:v(F),"onUpdate:modelValue":n[0]||(n[0]=e=>y(F)?F.value=e:null),columns:v(V)},null,8,["modelValue","columns"])])),_:1},8,["visible","title","width"])])),_:1})}}});export{G as _};
